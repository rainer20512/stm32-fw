   1. When then STM Cube Directory is changed:
      THe easiest way is to open the project file as xml file, then search and replace the hard code STM Cube directory 

   2. DMA memory has to reside in an area that is not chaced by D-Cache. To create it, define an power-of-2 sized ram area in SRAM1-4 
      (not AXISRAM, this cannot be accessed by DMA1 and DMA2) and define it as not cacheable and not bufferable to MPU. All types of
      DMA memory then sould be allocated (statically or dynamically) only in this area. To ease that in hardware.h

           #define DMAMEM   __attribute((section(".dmamem")))  

      is defined. Also in the flash_placement.xml we added an section

           <ProgramSection alignment="4" load="No" name=".dmamem" />

      in the non cacheable RAM area.

    3. The MemoryMap.XML file MUST NOT contain comment lines. Parsing will stop with this lines

    4. DMA and IPC mem must be zeroed upon start. To do that, customize the systems thumb_crt0.s for CM7 core 
       and add the following lines 

         /* RHB additional code to zero IPC and DMA memory */
        ldr r0, =__dmamem_start__
        ldr r1, =__dmamem_end__
        movs r2, #0
        bl memory_set
        ldr r0, =__ipcmem_start__
        ldr r1, =__ipcmem_end__
        movs r2, #0
        bl memory_set
        /* RHB end of inserted code */

volatile unsigned int *DWT_CYCCNT     = (volatile unsigned int *)0xE0001004; //address of the register
volatile unsigned int *DWT_CONTROL    = (volatile unsigned int *)0xE0001000; //address of the register
volatile unsigned int *SCB_DEMCR      = (volatile unsigned int *)0xE000EDFC; //address of the register

void init_cycle_counter()
{
  // Init cycle counter
  *SCB_DEMCR = *SCB_DEMCR | 0x01000000;
  *DWT_CYCCNT = 0; // reset the counter
  *DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
}

uint32_t read_cycle_counter()
{
  return *DWT_CYCCNT;
}

void delay_us(uint32_t time_us)
{
  uint32_t cyc1 = *DWT_CYCCNT;
  if (time_us>0)
  {
    while ((*DWT_CYCCNT-cyc1)<=(SystemCoreClock/1000000)*(time_us-1)){};
  }
}
